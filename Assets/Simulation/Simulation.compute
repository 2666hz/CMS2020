// Physarum
// Initially based on code written by Deniz Bicer
// https://github.com/DenizBicer/Physarum

// These 3 lines declare different "entry points" into this code...
// They are used with the computerShader.dispatch() and findKernel() functions in C#
#pragma kernel InitParticles
#pragma kernel MoveParticles
#pragma kernel InitTrail
#pragma kernel StepTrail

//#pragma multi_compile MODE1 MODE2

// The allowable parameter values for numthreads depends on the compute shader version.
//	Compute Shader  Maximum Z   Maximum Threads(X * Y * Z)
//		cs_4_x			1			768
//		cs_5_0			64			1024
#define PARTICLETHREADSPERGROUP		[numthreads(64, 1, 1)]
#define TRAILTHREADSPERGROUP		[numthreads(8, 8, 1)]

// These are our fixed settings.. These cannot be changed after starting...
float fTrailMapDimension;	// Dimensions of trailMap e.g. 1024 x 1024
uint iTrailMapDimension;
float trailMapTexelSize;	// Size of single texel in trailMap = 1.0f / trailMapDimension

// These are our Global parameters. These can be changed in real-time
float sensorAngle;
float rotationAngle;
float sensorOffsetDistance;
float stepSize;
float decay; // rate that the chemical fades from the environment
float deposit; // rate that the particle deposits chemical in the environment
float randomness;

// Parameters influencing the start of the simulation..
float2 startPosition; // start position
float startRadius; // where the particles begin their life.

// There are our user "pointer" parameters...
float2 pointerUV;
float pointerRadius;
float pointerChemicalA;
float pointerParticleAttraction;

struct Particle
{
	float2 pos; 	// between 0 and 1
	float angle;	// in radians, 0 to 2PI
};

// ReadWrite array of particle structs
RWStructuredBuffer<Particle> particleBuffer; // 1D array of Particle structs

// ReadWrite 2D array of 4 chemical values
RWTexture2D<float4> TrailMap; // 2D Grid of float4

// A pseudo-random number generator.. returns a number between 0.0 and MAXFLOAT
uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

// Return a random number between 0.0f and 1.0f
float randomFloat(uint seed)
{
//	return wang_hash(seed) / float(0x7FFFFFFF) / 2.0;
	return float(wang_hash(seed)) * (1.0 / 4294967296.0); // 4294967295 (0xffffffff)
}

// Return a random float3 between 0.0f and 1.0f
float3 randomFloat3(uint seed)
{
	uint3 h;
	h.x = wang_hash(seed);
	h.y = wang_hash(h.x);
	h.z = wang_hash(h.y);

	return float3(h) * float3(1.0 / 4294967296.0, 1.0 / 4294967296.0, 1.0 / 4294967296.0); // 4294967295 (0xffffffff)
}

// Returns -1 or 1
float randomSign1(uint seed)
{
	return step(randomFloat(seed), 0.5f) * 2 - 1;
//	return step(wang_hash(seed), 2147483647) * 2 - 1;
}

float randomSign2(float2 seed2)
{
//	seed2 *= randomness;
	return 1;
}

float randomSign3(uint seed, float2 seed2)
{
	seed2 *= randomness;
	uint2 s = uint2(seed2);
	return step(wang_hash(seed ^ wang_hash(s.x ^ wang_hash(s.y))), 2147483647) * 2 - 1;
}

//
float directTo(float2 pos, float2 directedPos)
{
	float2 direction = directedPos - pos;
	return atan2(direction.y, direction.x);
}

//return 1 if v inside the circle, return 0 otherwise
float insideCircle(float2 v, float2 center, float radius)
{
	float2 position = v - center;
	return (step(radius, length(position)) + 1.0) % 2.0;
}

void RandomStart(uint id, out float2 pos, out float angle)
{
	// Give each particular a random initialisation position..
	// x, y are range from -startRadius/2 to startRadius/2
	float3 p = randomFloat3(id.x);
	p.xy -= 0.5f;
	p.xy *= startRadius;
	p.xy += 0.5f;
	pos = p.xy;

	// Every particle begins with a random direction
	angle = p.z * 6.283185307179586476925286766559; // x 2 x PI
}

PARTICLETHREADSPERGROUP
void InitParticles(uint3 id: SV_DISPATCHTHREADID)
{
	float2 pos; float angle;
	RandomStart(id.x, pos, angle);

	particleBuffer[id.x].pos = pos;
	particleBuffer[id.x].angle = angle;
}

/*
vec4 texture2D_bilinear(in sampler2D t, in vec2 uv, in vec2 textureSize, in vec2 texelSize)
{
	vec2 f = fract(uv * textureSize);
	uv += (.5 - f) * texelSize;    // move uv to texel centre
	vec4 tl = texture2D(t, uv);
	vec4 tr = texture2D(t, uv + vec2(texelSize.x, 0.0));
	vec4 bl = texture2D(t, uv + vec2(0.0, texelSize.y));
	vec4 br = texture2D(t, uv + vec2(texelSize.x, texelSize.y));
	vec4 tA = mix(tl, tr, f.x);
	vec4 tB = mix(bl, br, f.x);
	return mix(tA, tB, f.y);
}
*/

float4 ReadTrail(const float2 pos)
{
	return TrailMap[frac(pos) * fTrailMapDimension]; // pos is from 0 to 1. frac() wraps the value. Converting a float to int rounds towards zero
}

float SenseChemicalMap(float2 pos, float angle)
{
	float s, c; sincos(angle, s, c); // sin and cos of anglesLFR
	const float2 sensePos = pos + sensorOffsetDistance * float2(c, s);
	return ReadTrail(sensePos).x;
}
/*
// Original particle model as described in Jeff Jones, "Characteristics of Pattern Formation and Evolution in Approximations of Physarum Transport Networks", Artificial Life 2010 16:2, 127 - 153
float TurnParticle(const float L, const float F, const float R, const uint3 id, const float2 pos)
{
	const float maxLR = max(L, R);

	// if Forward reading is strongest, or equal, keep going forward
	if (F >= maxLR)
		return 0;
			
	const float d = sign(L - R);
	// if both Left and Right are stronger than forward, turn randomly
//	if (d == 0) // Forward is less than Left or Right, so turn randomly
//		return rotationAngle * randomSign1(id.x); // 2(pos); //randomSign3(id.x, pos);

	return d * rotationAngle;
}
*/
// Simplest version. No randomness.
// If Forward strongest, go straight
// If not, turn towards the largest of L or R.
// If L = R, then go forward, even if F < L and F < R
// If F = L = R, then go straight
float TurnParticle(const float L, const float F, const float R, const uint3 id, const float2 pos)
{
	if (F > L && F > R)
		return 0;
	return sign(L - R) * rotationAngle;
}

PARTICLETHREADSPERGROUP
void MoveParticles(uint3 id: SV_DISPATCHTHREADID)
{
	float angle = particleBuffer[id.x].angle;
	float2 pos = particleBuffer[id.x].pos;
	
	// Read the chemical map from Left, Front, Right...
	const float L = SenseChemicalMap(pos, angle + sensorAngle);
	const float F = SenseChemicalMap(pos, angle);
	const float R = SenseChemicalMap(pos, angle - sensorAngle);

	// Decide which way to turn...
	angle += TurnParticle(L, F, R, id, pos);

	// Calculate new position
	float s, c; sincos(angle, s, c);
	const float2 nextPos = frac(pos + float2(c, s) * stepSize);	// Use frac to wrap around the position at the edges

	// Store new particle position and angle in particleBuffer
	particleBuffer[id.x].pos = nextPos;
	particleBuffer[id.x].angle = angle;

	// Deposit chemical trail in .x
	// Add 1 for into .z
	TrailMap[nextPos * fTrailMapDimension] += float4(deposit, 0.0, 1.0, 0.0);
}

//----------------------------------------------------------------------

// Initialise the "Environment" TrailMap texture
TRAILTHREADSPERGROUP
void InitTrail(uint3 id : SV_DISPATCHTHREADID)
{
	TrailMap[id.xy] = float4(0, 0, 0, 1.0f);		// float4(value.x, value.y, value.z, value.w);
}

float4 ReadTrailMap(uint2 id)
{
	id = id % iTrailMapDimension;
	return TrailMap[id];
}

// Update the "Environment" TrailMap texture
TRAILTHREADSPERGROUP
void StepTrail(uint3 id : SV_DISPATCHTHREADID)
{
//	float2 uv = id.xy * trailMapTexelSize;
	const float4 map = TrailMap[id.xy];

	//mean 3x3 filter. Sample all the values around
	float value = map.x;
	
	value += ReadTrailMap(id.xy + uint2(-1, -1)).x; // -1,-1
	value += ReadTrailMap(id.xy + uint2(0, -1)).x; // 0, -1
	value += ReadTrailMap(id.xy + uint2(1, -1)).x; // +1, -1
	value += ReadTrailMap(id.xy + uint2(-1, 0)).x; // -1, 0
	value += ReadTrailMap(id.xy + uint2(1, 0)).x; // +1, 0
	value += ReadTrailMap(id.xy + uint2(-1, 1)).x; // -1, +1
	value += ReadTrailMap(id.xy + uint2(0, 1)).x; // 0, +1
	value += ReadTrailMap(id.xy + uint2(1, 1)).x; // +1, +1

	value *= (1.0 / 9.0);
	value *= (1.0 - decay);
	
	// Write new blurred value into .x and shift particle count from z to y. Reset particle counter in z
	TrailMap[id.xy] = float4(value, map.z, 0, 1.0f);		// float4(value.x, value.y, value.z, value.w);
//	TrailMap[id.xy] = float4(1.0f, 1.0f, 0, 1.0f);		// float4(value.x, value.y, value.z, value.w);
}
